#include<stdio.h>
#include<stdbool.h>
#define MAX 10

struct Stack{
int arr[100];
int top;
};
void push(struct Stack *pstk, int val){
if(pstk->top == MAX-1){
printf("Overflow");
return;
}
pstk->top = pstk->top+1;
pstk->arr[pstk->top] = val;
}
int pop(struct Stack *pstk){
if(pstk->top == -1){
printf("Underflow");
return -1;
}
int item = pstk->arr[pstk->top];
pstk->arr[pstk->top] = 0;
pstk->top = pstk->top-1;
return item;
}
bool isEmpty(struct Stack *pstk){
return pstk->top==-1;
}

// ------------------------------------------
int precedence(char ch){
if(ch=='+' || ch=='-') return 1;
else if(ch=='*' || ch=='/') return 2;
else if(ch=='^') return 3;
return 0;
}

bool isOperator(char ch){
return (ch=='+' || ch=='-' || ch=='*' || ch=='/');
}
bool isOperand(char ch){
return (ch>='a' && ch<='z') || (ch>='A' && ch<='Z') || (ch>='0' && ch<='9');
}

void infix_postfix(char exp[], char postfix[], struct Stack *pstk){
int i=0; // for traversing exp
int k=0; // for traversing postfix []
while(exp[i] != '\0'){
char ch = exp[i];
if(ch == '(') push(pstk, ch);
else if(isOperand(ch)){
postfix[k] = ch;
k++;
}
else if(ch==')'){
while(!isEmpty(pstk) && pstk->arr[pstk->top] != '('){
postfix[k] = pop(pstk);
k++;
}
pop(pstk);
}
else if(isOperator(ch)){
while(!isEmpty(pstk) && precedence(pstk->arr[pstk->top]) >=

precedence(ch)){

postfix[k] = pop(pstk);
k++;
}
push(pstk, ch);
}
i++;
}

// pop all the remaining operators from the stack
while(!isEmpty(pstk)){
postfix[k] = pop(pstk);
k++;
}

postfix[k] = '\0';
}

// -----------------------------------
int calculate(char optr, int op1, int op2){
if(optr == '+') return op1+op2;
else if(optr == '-') return op1-op2;
else if(optr == '*') return op1*op2;
else if(optr == '/') return op1/op2;
}
int evaluate(char exp[]){
int i=0;
char optr, value;
int op1, op2;
struct Stack stk;
stk.top = -1;
while(exp[i] != '\0'){
optr = exp[i];
if(optr=='+' || optr=='-' || optr=='*' || optr=='/' || optr=='$'){
op2 = pop(&stk);
op1 = pop(&stk);
value = calculate(optr, op1, op2);
push(&stk, value);
}
else push(&stk, optr-'0');
i++;
}
return value;
}

int main(){
// char exp[] = "(a+b)*c";
char exp[] = "(1+2)*3";
char postfix[20];
struct Stack stk;
stk.top = -1;

infix_postfix(exp, postfix, &stk);
printf("Postfix: %s\n", postfix);
int ans = evaluate(postfix);
printf("Result : %d", ans);

return 0;
}
