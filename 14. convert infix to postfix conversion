#include <stdio.h>
#include <stdbool.h>
#define MAX 10
struct Stack {
int arr[MAX];
int top;
};
void push(struct Stack* pstk, int val) {
if (pstk->top == MAX - 1) {
printf("Overflow\n");
return;
}
pstk->arr[++pstk->top] = val;
}
int pop(struct Stack* pstk) {
if (pstk->top == -1) {
printf("Underflow\n");
return -1;
}
return pstk->arr[pstk->top--];
}
bool isEmpty(struct Stack* pstk) {
return pstk->top == -1;
}
int precedence(char ch) {
if (ch == '+' || ch == '-') return 1;
else if (ch == '*' || ch == '/') return 2;
else if (ch == '^') return 3;
return 0;
}
bool isOperator(char ch) {
return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}
bool isOperand(char ch) {
return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9');
}

void infix_postfix(char exp[], char postfix[], struct Stack* pstk) {
int i = 0, k = 0;
char ch;
while (exp[i] != '\0') {
ch = exp[i];
if (ch == '(') {
push(pstk, ch);
}
else if (isOperand(ch)) {
postfix[k++] = ch;
}
else if (ch == ')') {
while (!isEmpty(pstk) && pstk->arr[pstk->top] != '(') {
postfix[k++] = pop(pstk);
}
pop(pstk); // Pop '('
}
else if (isOperator(ch)) {
while (!isEmpty(pstk) && precedence(pstk->arr[pstk->top]) >= precedence(ch)) {
postfix[k++] = pop(pstk);
}
push(pstk, ch);
}
i++;
}
while (!isEmpty(pstk)) {
postfix[k++] = pop(pstk);
}
postfix[k] = '\0';
}
int main() {
char exp[] = "(a+b)*c";
char postfix[20];
struct Stack stk;
stk.top = -1;
infix_postfix(exp, postfix, &stk);
printf("Postfix expression is: %s\n", postfix);
return 0;
}
