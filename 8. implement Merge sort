#include <stdio.h>
#include <stdlib.h>
void merge(int* arr, int left, int mid, int right) {
int n1 = mid - left + 1;
int n2 = right - mid;
int* leftArr = (int*)malloc(n1 * sizeof(int));
int* rightArr = (int*)malloc(n2 * sizeof(int));
for (int i = 0; i < n1; i++) {
leftArr[i] = arr[left + i];
}
for (int i = 0; i < n2; i++) {
rightArr[i] = arr[mid + 1 + i];
}
int i = 0, j = 0, k = left;
while (i < n1 && j < n2) {
if (leftArr[i] <= rightArr[j]) {
arr[k++] = leftArr[i++];
} else {
arr[k++] = rightArr[j++];
}
}
while (i < n1) {
arr[k++] = leftArr[i++];
}
while (j < n2) {
arr[k++] = rightArr[j++];
}
free(leftArr);
free(rightArr);
}

void mergeSort(int* arr, int n) {
for (int currSize = 1; currSize < n; currSize *= 2) {
for (int leftStart = 0; leftStart < n - 1; leftStart += 2 * currSize) {
int mid = (leftStart + currSize - 1 < n - 1) ? leftStart + currSize - 1 : n - 1;

int rightEnd = (leftStart + 2 * currSize - 1 < n - 1) ? leftStart + 2 * currSize - 1 : n - 1;
merge(arr, leftStart, mid, rightEnd);
}
}
}

void printArray(int* arr, int n) {
for (int i = 0; i < n; i++) {
printf("%d ", arr[i]);
}
printf("\n");
}

int main() {
int arr[] = {38, 27, 43, 3, 9, 82, 10};
int n = sizeof(arr) / sizeof(arr[0]);
printf("Original Array: ");
printArray(arr, n);
mergeSort(arr, n);
printf("Sorted Array: ");
printArray(arr, n);
return 0;
}
