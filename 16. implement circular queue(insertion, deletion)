#include<stdio.h>
#define MAX 5
struct CQueue{
int arr[MAX];
int front;
int rear;
};

void insertion(struct CQueue *cq ,int ele){
// overflow
// empty
// circular
// normal
if((cq->front-1 == cq->rear) || (cq->front==0 && cq->rear==MAX-1)){
printf("Queue overflow");
}
else if(cq->front == -1 && cq->rear == -1){
cq->front=0;
cq->rear=0;
cq->arr[cq->rear] = ele;
}
else if(cq->front != 0 && cq->rear == MAX-1){
cq->rear = 0;
cq->arr[cq->rear] = ele;
}
else{
cq->rear = cq->rear+1;
cq->arr[cq->rear] = ele;
}
}
void deletion(struct CQueue *cq){
// underflow
// single
// circular
// normal
if(cq->front == -1 && cq->rear == -1){
printf("Queue underflow");
}
else if(cq->front == cq->rear){
cq->arr[cq->front] = -1;
cq->front == -1;

cq->rear == -1;
}
else if(cq->front == MAX-1){
cq->arr[cq->front] = -1;
cq->front = 0;
}
else{
cq->arr[cq->front] = -1;
cq->front++;
}
}

void main(){
struct CQueue cq;
cq.front = -1;
cq.rear = -1;
insertion(&cq, 10);
insertion(&cq, 20);
insertion(&cq, 30);
insertion(&cq, 40);
insertion(&cq, 50);
insertion(&cq, 80);
deletion(&cq);
deletion(&cq);
deletion(&cq);
insertion(&cq,89);
insertion(&cq, 99);
deletion(&cq);
deletion(&cq);
deletion(&cq);

}
